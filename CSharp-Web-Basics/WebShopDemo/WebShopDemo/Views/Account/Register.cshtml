@model RegisterViewModel
@{
    ViewData["Title"] = "Register";
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-4">
        <form id="registerForm" method="post">
            <h2>Create a new account.</h2>
            <hr />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-floating">
                <input asp-for="FirstName" class="form-control" autocomplete="firstname" aria-required="true" />
                <label asp-for="FirstName"></label>
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-floating">
                <input asp-for="LastName" class="form-control" autocomplete="lastname" aria-required="true" />
                <label asp-for="LastName"></label>
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-floating">
                <input asp-for="Email" class="form-control" autocomplete="username" aria-required="true" />
                <label asp-for="Email"></label>
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-floating">
                <input asp-for="Password" class="form-control" autocomplete="new-password" aria-required="true" />
                <label asp-for="Password"></label>
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-floating">
                <input asp-for="PasswordConfirm" class="form-control" autocomplete="new-password" aria-required="true" />
                <label asp-for="PasswordConfirm"></label>
                <span asp-validation-for="PasswordConfirm" class="text-danger"></span>
            </div>
            <button id="registerSubmit" type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </form>
    </div>
    @*<div class="col-md-6 col-md-offset-2">
    <section>
    <h3>Use another service to register.</h3>
    <hr />
    @{
    if ((Model.ExternalLogins?.Count ?? 0) == 0)
    {
    <div>
    <p>
    There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
    about setting up this ASP.NET application to support logging in via external services</a>.
    </p>
    </div>
    }
    else
    {
    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
    <div>
    <p>
    @foreach (var provider in Model.ExternalLogins)
    {
    <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
    }
    </p>
    </div>
    </form>
    }
    }
    </section>
    </div>*@
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}





    @page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-4">
        <form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post">
            <h2>Create a new account.</h2>
            <hr />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-floating">
                <input asp-for="Input.FirstName" class="form-control" autocomplete="first name" aria-required="true" />
                <label asp-for="Input.FirstName"></label>
                <span asp-validation-for="Input.FirstName" class="text-danger"></span>
            </div>
            <div class="form-floating">
                <input asp-for="Input.LastName" class="form-control" autocomplete="last name" aria-required="true" />
                <label asp-for="Input.LastName"></label>
                <span asp-validation-for="Input.LastName" class="text-danger"></span>
            </div>
            <div class="form-floating">
                <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" />
                <label asp-for="Input.Email"></label>
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            <div class="form-floating">
                <input asp-for="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" />
                <label asp-for="Input.Password"></label>
                <span asp-validation-for="Input.Password" class="text-danger"></span>
            </div>
            <div class="form-floating">
                <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" />
                <label asp-for="Input.ConfirmPassword"></label>
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>
            <button id="registerSubmit" type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </form>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            @{
                if ((Model.ExternalLogins?.Count ?? 0) == 0)
                {
                    <div>
                        <p>
                            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
                            about setting up this ASP.NET application to support logging in via external services</a>.
                        </p>
                    </div>
                }
                else
                {
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                        <div>
                            <p>
                                @foreach (var provider in Model.ExternalLogins)
                                {
                                    <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}



                                // Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
namespace FindATrade.Web.Areas.Identity.Pages.Account
{
#nullable disable

    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Text;
    using System.Text.Encodings.Web;
    using System.Threading;
    using System.Threading.Tasks;
    using FindATrade.Data.Models;
    using Microsoft.AspNetCore.Authentication;
    using Microsoft.AspNetCore.Authorization;
    using Microsoft.AspNetCore.Identity;
    using Microsoft.AspNetCore.Identity.UI.Services;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.RazorPages;
    using Microsoft.AspNetCore.WebUtilities;
    using Microsoft.Extensions.Logging;

    public class RegisterModel : PageModel
    {
        private readonly SignInManager<ApplicationUser>
    _signInManager;
    private readonly UserManager<ApplicationUser>
        _userManager;
        private readonly IUserStore<ApplicationUser>
            _userStore;
            private readonly IUserEmailStore<ApplicationUser>
                _emailStore;
                private readonly ILogger<RegisterModel>
                    _logger;
                    private readonly IEmailSender _emailSender;

                    public RegisterModel(
                    UserManager<ApplicationUser>
                        userManager,
                        IUserStore<ApplicationUser>
                            userStore,
                            SignInManager<ApplicationUser>
                                signInManager,
                                ILogger<RegisterModel>
                                    logger,
                                    IEmailSender emailSender)
                                    {
                                    _userManager = userManager;
                                    _userStore = userStore;
                                    _emailStore = GetEmailStore();
                                    _signInManager = signInManager;
                                    _logger = logger;
                                    _emailSender = emailSender;
                                    }

                                    /// <summary>
                                        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
                                        ///     directly from your code. This API may change or be removed in future releases.
                                        ///
                                    </summary>
                                    [BindProperty]
                                    public InputModel Input { get; set; }

                                    /// <summary>
                                        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
                                        ///     directly from your code. This API may change or be removed in future releases.
                                        ///
                                    </summary>
                                    public string ReturnUrl { get; set; }

                                    /// <summary>
                                        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
                                        ///     directly from your code. This API may change or be removed in future releases.
                                        ///
                                    </summary>
                                    public IList<AuthenticationScheme>
                                        ExternalLogins { get; set; }

                                        /// <summary>
                                            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
                                            ///     directly from your code. This API may change or be removed in future releases.
                                            ///
                                        </summary>
                                        public class InputModel
                                        {
                                        /// <summary>
                                            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
                                            ///     directly from your code. This API may change or be removed in future releases.
                                            ///
                                        </summary>
                                        [Required]
                                        [EmailAddress]
                                        [Display(Name = "Email")]
                                        public string Email { get; set; }

                                        /// <summary>
                                            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
                                            ///     directly from your code. This API may change or be removed in future releases.
                                            ///
                                        </summary>
                                        [Required]
                                        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
                                        [DataType(DataType.Password)]
                                        [Display(Name = "Password")]
                                        public string Password { get; set; }

                                        /// <summary>
                                            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
                                            ///     directly from your code. This API may change or be removed in future releases.
                                            ///
                                        </summary>
                                        [DataType(DataType.Password)]
                                        [Display(Name = "Confirm password")]
                                        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
                                        public string ConfirmPassword { get; set; }

                                        // Extended User Register Models
                                        [Required]
                                        [StringLength(30, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 3)]
                                        [Display(Name = "First Name")]
                                        public string FirstName { get; set; }

                                        [Required]
                                        [StringLength(30, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 3)]
                                        [Display(Name = "Last Name")]
                                        public string LastName { get; set; }
                                        }


                                        public async Task OnGetAsync(string returnUrl = null)
                                        {
                                        ReturnUrl = returnUrl;
                                        ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
                                        }

                                        public async Task<IActionResult>
                                            OnPostAsync(string returnUrl = null)
                                            {
                                            returnUrl ??= Url.Content("~/");
                                            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
                                            if (ModelState.IsValid)
                                            {
                                            var user = CreateUser();

                                            await _userStore.SetUserNameAsync(user, Input.FirstName, CancellationToken.None);
                                            await _emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

                                            // Added Extendedn User Properties
                                            user.FirstName = Input.FirstName;
                                            user.LastName = Input.LastName;

                                            var result = await _userManager.CreateAsync(user, Input.Password);

                                            if (result.Succeeded)
                                            {
                                            _logger.LogInformation("User created a new account with password.");

                                            var userId = await _userManager.GetUserIdAsync(user);
                                            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                                            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                                            var callbackUrl = Url.Page(
                                            "/Account/ConfirmEmail",
                                            pageHandler: null,
                                            values: new { area = "Identity", userId = userId, code = code, returnUrl = returnUrl },
                                            protocol: Request.Scheme);

                                            await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
                                            $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                                            if (_userManager.Options.SignIn.RequireConfirmedAccount)
                                            {
                                            return RedirectToPage("RegisterConfirmation", new { email = Input.Email, returnUrl = returnUrl });
                                            }
                                            else
                                            {
                                            await _signInManager.SignInAsync(user, isPersistent: false);
                                            return LocalRedirect(returnUrl);
                                            }
                                            }
                                            foreach (var error in result.Errors)
                                            {
                                            ModelState.AddModelError(string.Empty, error.Description);
                                            }
                                            }

                                            // If we got this far, something failed, redisplay form
                                            return Page();
                                            }

                                            private ApplicationUser CreateUser()
                                            {
                                            try
                                            {
                                            return Activator.CreateInstance<ApplicationUser>
                                                ();
                                                }
                                                catch
                                                {
                                                throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor, or alternatively " +
                                                $"override the register page in /Areas/Identity/Pages/Account/Register.cshtml");
                                                }
                                                }

                                                private IUserEmailStore<ApplicationUser>
                                                    GetEmailStore()
                                                    {
                                                    if (!_userManager.SupportsUserEmail)
                                                    {
                                                    throw new NotSupportedException("The default UI requires a user store with email support.");
                                                    }
                                                    return (IUserEmailStore<ApplicationUser>
                                                        )_userStore;
                                                        }
                                                        }
                                                        }
